

# The Facade Pattern

# define all the complex moving parts
import time

class CPU:
	def instantiate(self):
		print('######### Instantiating the CPU #########')
		time.sleep(1)
		print('-------- Completed --------')

	def jump(self):
		print('JUMP Methode From the CPU')
		time.sleep(1)
		print('-------- CPU Is Ready For The Execution --------')

	def execute(self):
		print('Execute Methode From CPU')
		time.sleep(1)
		print('-------- Completed Execution --------')



class Memory:
	def instantiate(self):
		print('Instantiating the Memory')
		time.sleep(1)
		print('-------- Completed --------')

	def load(self):
		print('Fetching the BOOT_ADDRESS')
		time.sleep(1)
		print('-------- Succesfully loaded BOOT_ADDRESS --------')


class HardDrive:
	def instantiate(self):
		print('Instantiating the HardDrive')
		time.sleep(1)
		print('-------- Completed --------')

	def read(self):
		print('Performing Read Operation')
		time.sleep(1)
		print('-------- Located BOOT_SECTOR and Calculated SECTOR_SIZE --------')




# Facade
class Computer:
	def __init__(self):
		self.cpu = CPU()
		self.memory = Memory()
		self.hardDrive = HardDrive()

	def start(self):
		# instantiate all components
		self.cpu.instantiate() 
		self.memory.instantiate()
		self.hardDrive.instantiate()
		
		# load the BOOT ADRRESS
		self.memory.load()

		# locate BOOT SECTOR and calculate SECTOR_SIZE
		self.hardDrive.read()

		# invoke cpu again and start execution
		self.cpu.jump()
		self.cpu.execute()




































































































































































































































































































































































































































































































